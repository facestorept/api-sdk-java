/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.I18n;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * Category
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-11-21T13:53:33.030Z")
public class Category {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("position")
  private Integer position = null;

  @SerializedName("image_small")
  private String imageSmall = null;

  @SerializedName("image_larger")
  private String imageLarger = null;

  @SerializedName("active")
  private Boolean active = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt = null;

  /**
   * Gets or Sets visibility
   */
  @JsonAdapter(VisibilityEnum.Adapter.class)
  public enum VisibilityEnum {
    FACEBOOK("facebook"),
    
    MOBILE("mobile"),
    
    WEBSTORE("webstore"),
    
    NONE("none"),
    
    ALL("all");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VisibilityEnum fromValue(String text) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<VisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VisibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return VisibilityEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("visibility")
  private List<VisibilityEnum> visibility = null;

  @SerializedName("i18n")
  private List<I18n> i18n = null;

  public Category id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public Category position(Integer position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @ApiModelProperty(value = "")
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }

  public Category imageSmall(String imageSmall) {
    this.imageSmall = imageSmall;
    return this;
  }

   /**
   * The file to be attached. Must be multipart/form-data. The maximum file size is 2 MB. 
   * @return imageSmall
  **/
  @ApiModelProperty(value = "The file to be attached. Must be multipart/form-data. The maximum file size is 2 MB. ")
  public String getImageSmall() {
    return imageSmall;
  }

  public void setImageSmall(String imageSmall) {
    this.imageSmall = imageSmall;
  }

  public Category imageLarger(String imageLarger) {
    this.imageLarger = imageLarger;
    return this;
  }

   /**
   * The file to be attached. Must be multipart/form-data. The maximum file size is 2 MB. 
   * @return imageLarger
  **/
  @ApiModelProperty(value = "The file to be attached. Must be multipart/form-data. The maximum file size is 2 MB. ")
  public String getImageLarger() {
    return imageLarger;
  }

  public void setImageLarger(String imageLarger) {
    this.imageLarger = imageLarger;
  }

  public Category active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @ApiModelProperty(example = "true", value = "")
  public Boolean isActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }

  public Category createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public Category updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public Category visibility(List<VisibilityEnum> visibility) {
    this.visibility = visibility;
    return this;
  }

  public Category addVisibilityItem(VisibilityEnum visibilityItem) {
    if (this.visibility == null) {
      this.visibility = new ArrayList<VisibilityEnum>();
    }
    this.visibility.add(visibilityItem);
    return this;
  }

   /**
   * channels that resource are showed
   * @return visibility
  **/
  @ApiModelProperty(value = "channels that resource are showed")
  public List<VisibilityEnum> getVisibility() {
    return visibility;
  }

  public void setVisibility(List<VisibilityEnum> visibility) {
    this.visibility = visibility;
  }

  public Category i18n(List<I18n> i18n) {
    this.i18n = i18n;
    return this;
  }

  public Category addI18nItem(I18n i18nItem) {
    if (this.i18n == null) {
      this.i18n = new ArrayList<I18n>();
    }
    this.i18n.add(i18nItem);
    return this;
  }

   /**
   * I18n fields to categories
   * @return i18n
  **/
  @ApiModelProperty(value = "I18n fields to categories")
  public List<I18n> getI18n() {
    return i18n;
  }

  public void setI18n(List<I18n> i18n) {
    this.i18n = i18n;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Category category = (Category) o;
    return Objects.equals(this.id, category.id) &&
        Objects.equals(this.position, category.position) &&
        Objects.equals(this.imageSmall, category.imageSmall) &&
        Objects.equals(this.imageLarger, category.imageLarger) &&
        Objects.equals(this.active, category.active) &&
        Objects.equals(this.createdAt, category.createdAt) &&
        Objects.equals(this.updatedAt, category.updatedAt) &&
        Objects.equals(this.visibility, category.visibility) &&
        Objects.equals(this.i18n, category.i18n);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, position, imageSmall, imageLarger, active, createdAt, updatedAt, visibility, i18n);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Category {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    imageSmall: ").append(toIndentedString(imageSmall)).append("\n");
    sb.append("    imageLarger: ").append(toIndentedString(imageLarger)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    i18n: ").append(toIndentedString(i18n)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

