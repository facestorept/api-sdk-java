/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.InlineResponse2006;
import io.swagger.client.model.InlineResponse2014;
import io.swagger.client.model.NotFoundResponse;
import io.swagger.client.model.Product;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductsApi
 */
@Ignore
public class ProductsApiTest {

    private final ProductsApi api = new ProductsApi();

    
    /**
     * 
     *
     * Creates a new product in the store.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addProductTest() throws ApiException {
        Product product = null;
        InlineResponse2014 response = api.addProduct(product);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * deletes a single product based on the ID supplied
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProductByIdTest() throws ApiException {
        Long id = null;
        api.deleteProductById(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a product based on a single ID  ### Includes You can give the following values on includes parameter: &#x60;brands, categories, routes, stocks&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductByIdTest() throws ApiException {
        Long id = null;
        List<String> includes = null;
        Integer limit = null;
        InlineResponse2014 response = api.getProductById(id, includes, limit);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all products from the system that the user has access to  ### Includes You can give the following values on includes parameter: &#x60;brands, categories, routes, stocks&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductsTest() throws ApiException {
        List<String> includes = null;
        Integer limit = null;
        List<String> orderBy = null;
        InlineResponse2006 response = api.getProducts(includes, limit, orderBy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * update a single product based on the ID supplied
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProductByIdTest() throws ApiException {
        Long id = null;
        Product tax = null;
        api.updateProductById(id, tax);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * update a single product based on the ID supplied
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProductById_0Test() throws ApiException {
        Long id = null;
        Product tax = null;
        api.updateProductById_0(id, tax);

        // TODO: test validations
    }
    
}
